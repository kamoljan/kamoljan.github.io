---
layout: post
title:  "FrogJmp"
date:   2015-03-06 23:45:18
categories: jekyll update
---

###Task description

{% highlight text %}

Task description
A small frog wants to get to the other side of the road. The frog is currently located at position X and wants to get to a position greater than or equal to Y. The small frog always jumps a fixed distance, D.
Count the minimal number of jumps that the small frog must perform to reach its target.
Write a function:
func Solution(X int, Y int, D int) int
that, given three integers X, Y and D, returns the minimal number of jumps from position X to a position equal to or greater than Y.
For example, given:
  X = 10
  Y = 85
  D = 30
the function should return 3, because the frog will be positioned as follows:
after the first jump, at position 10 + 30 = 40
after the second jump, at position 10 + 30 + 30 = 70
after the third jump, at position 10 + 30 + 30 + 30 = 100
Assume that:
X, Y and D are integers within the range [1..1,000,000,000];
X â‰¤ Y.
Complexity:
expected worst-case time complexity is O(1);
expected worst-case space complexity is O(1).
{% endhighlight %}

###Solution

{% highlight go %}
package solution

// you can also use imports, for example:
// import "fmt"

// you can use fmt.Println for debugging purposes, e.g.
// fmt.Println("this is a debug message")
// write your code in Go 1.4
    
func Solution(X int, Y int, D int) int {
    if X == Y {
        return 0
    }
    var s int = 0
    if X < Y && D != 0 {
        s = ((Y-X) / D)
        // fmt.Println("s => ", s)
        // fmt.Println("Y => ", Y)
        if ((Y-X) - D * s > 0) {
            // fmt.Println("D * s => ", D * s)
            // fmt.Println("(Y-X) => ", (Y-X))
            s = s + 1
        }
    }
    return s
}
{% endhighlight %}